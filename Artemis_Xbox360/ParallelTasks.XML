<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ParallelTasks</name>
    </assembly>
    <members>
        <member name="T:ParallelTasks.Task">
            <summary>
            A struct which represents a single execution of an IWork instance.
            </summary>
        </member>
        <member name="M:ParallelTasks.Task.Wait">
            <summary>
            Waits for the task to complete.
            </summary>
        </member>
        <member name="P:ParallelTasks.Task.IsComplete">
            <summary>
            Gets a value which indicates if this task has completed.
            </summary>
        </member>
        <member name="P:ParallelTasks.Task.Exceptions">
            <summary>
            Gets an array containing any exceptions thrown by this task.
            </summary>
        </member>
        <member name="T:ParallelTasks.Semaphore">
            <summary>
            A semaphore class.
            </summary>
        </member>
        <member name="M:ParallelTasks.Semaphore.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:ParallelTasks.Semaphore"/> class.
            </summary>
            <param name="maximumCount"></param>
        </member>
        <member name="M:ParallelTasks.Semaphore.WaitOne">
            <summary>
            Blocks the calling thread until resources are made available, then consumes one resource.
            </summary>
        </member>
        <member name="M:ParallelTasks.Semaphore.Release">
            <summary>
            Adds one resource.
            </summary>
        </member>
        <member name="T:ParallelTasks.IWork">
            <summary>
            An interface for a piece of work which can be executed by ParallelTasks.
            </summary>
        </member>
        <member name="M:ParallelTasks.IWork.DoWork">
            <summary>
            Executes the work.
            </summary>
        </member>
        <member name="P:ParallelTasks.IWork.Options">
            <summary>
            Gets options specifying how this work may be executed.
            </summary>
        </member>
        <member name="T:ParallelTasks.Hashtable`2">
            <summary>
            A thread safe hashtable.
            </summary>
            <typeparam name="Key">The type of item to use as keys.</typeparam>
            <typeparam name="Data">The type of data stored.</typeparam>
        </member>
        <member name="M:ParallelTasks.Hashtable`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelTasks.Hashtable`2"/> class.
            </summary>
            <param name="initialCapacity">The initial capacity of the table.</param>
        </member>
        <member name="M:ParallelTasks.Hashtable`2.Add(`0,`1)">
            <summary>
            Adds an item to this hashtable.
            </summary>
            <param name="key">The key at which to add the item.</param>
            <param name="data">The data to add.</param>
        </member>
        <member name="M:ParallelTasks.Hashtable`2.UnsafeSet(`0,`1)">
            <summary>
            Sets the value of the item at the specified key location.
            This is only guaranteed to work correctly if no other thread is modifying the same key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:ParallelTasks.Hashtable`2.TryGet(`0,`1@)">
            <summary>
            Tries to get the data at the specified key location.
            </summary>
            <param name="key">The key to search for.</param>
            <param name="data">The data at the key location.</param>
            <returns><c>true</c> if the data was found; else <c>false</c>.</returns>
        </member>
        <member name="M:ParallelTasks.Hashtable`2.Remove(`0)">
            <summary>
            Removes the data at the specified key location.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:ParallelTasks.Hashtable`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:ParallelTasks.Hashtable`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:ParallelTasks.WorkOptions">
            <summary>
            A struct containing options about how an IWork instance can be executed.
            </summary>
        </member>
        <member name="P:ParallelTasks.WorkOptions.DetachFromParent">
            <summary>
            Gets or sets a value indicating if the work will be created detached from its parent.
            If <c>false</c>, the parent task will wait for this work to complete before itself completing.
            </summary>
        </member>
        <member name="P:ParallelTasks.WorkOptions.MaximumThreads">
            <summary>
            Gets or sets the maximum number of threads which can concurrently execute this work.
            </summary>
        </member>
        <member name="P:ParallelTasks.WorkOptions.QueueFIFO">
            <summary>
            Gets ir sets a value indicating that this work should be queued in a first in first out fashion.
            </summary>
        </member>
        <member name="T:ParallelTasks.Singleton`1">
            <summary>
            Implements a singleton instance of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of object to create a singleton instance of.</typeparam>
        </member>
        <member name="P:ParallelTasks.Singleton`1.Instance">
            <summary>
            Gets a singleton instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:ParallelTasks.WorkStealingScheduler">
            <summary>
            A "work stealing" work scheduler class.
            This can give much better performance than <see cref="T:ParallelTasks.SimpleScheduler"/> when tasks often launch sub-tasks.
            </summary>
        </member>
        <member name="T:ParallelTasks.IWorkScheduler">
            <summary>
            An interface defining a task scheduler.
            </summary>
        </member>
        <member name="M:ParallelTasks.IWorkScheduler.Schedule(ParallelTasks.Task)">
            <summary>
            Schedules a task for execution.
            </summary>
            <param name="item">The task to schedule.</param>
        </member>
        <member name="M:ParallelTasks.WorkStealingScheduler.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ParallelTasks.WorkStealingScheduler"/> class.
            </summary>
        </member>
        <member name="M:ParallelTasks.WorkStealingScheduler.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:ParallelTasks.WorkStealingScheduler"/> class.
            </summary>
            <param name="numThreads">The number of threads to create.</param>
        </member>
        <member name="M:ParallelTasks.WorkStealingScheduler.Schedule(ParallelTasks.Task)">
            <summary>
            Schedules a task for execution.
            </summary>
            <param name="task">The task to schedule.</param>
        </member>
        <member name="T:ParallelTasks.SimpleScheduler">
            <summary>
            A simple work scheduler class, implemented with
            a blocking queue (producer-consumer).
            </summary>
        </member>
        <member name="M:ParallelTasks.SimpleScheduler.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ParallelTasks.SimpleScheduler"/> class.
            </summary>
        </member>
        <member name="M:ParallelTasks.SimpleScheduler.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:ParallelTasks.SimpleScheduler"/> class.
            </summary>
            <param name="threadCount">The number of worker threads to create.</param>
        </member>
        <member name="M:ParallelTasks.SimpleScheduler.Schedule(ParallelTasks.Task)">
            <summary>
            Schedules a task for execution.
            </summary>
            <param name="work">The task to schedule.</param>
        </member>
        <member name="T:ParallelTasks.SpinLock">
            <summary>
            A struct which implements a spin lock.
            </summary>
        </member>
        <member name="M:ParallelTasks.SpinLock.Enter">
            <summary>
            Enters the lock. The calling thread will spin wait until it gains ownership of the lock.
            </summary>
        </member>
        <member name="M:ParallelTasks.SpinLock.TryEnter">
            <summary>
            Tries to enter the lock.
            </summary>
            <returns><c>true</c> if the lock was successfully taken; else <c>false</c>.</returns>
        </member>
        <member name="M:ParallelTasks.SpinLock.TryEnter(System.TimeSpan)">
            <summary>
            Tries to enter the lock.
            Fails after the specified time has elapsed without aquiring the lock.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns><c>true</c> if the lock was successfully taken; else <c>false</c>.</returns>
        </member>
        <member name="M:ParallelTasks.SpinLock.Exit">
            <summary>
            Exits the lock. This allows other threads to take ownership of the lock.
            </summary>
        </member>
        <member name="T:ParallelTasks.Future`1">
            <summary>
            A task struct which can return a result.
            </summary>
            <typeparam name="T">The type of result this future calculates.</typeparam>
        </member>
        <member name="M:ParallelTasks.Future`1.GetResult">
            <summary>
            Gets the result. Blocks the calling thread until the future has completed execution.
            This can only be called once!
            </summary>
            <returns></returns>
        </member>
        <member name="P:ParallelTasks.Future`1.IsComplete">
            <summary>
            Gets a value which indicates if this future has completed.
            </summary>
        </member>
        <member name="P:ParallelTasks.Future`1.Exceptions">
            <summary>
            Gets an array containing any exceptions thrown by this future.
            </summary>
        </member>
        <member name="T:ParallelTasks.TaskException">
            <summary>
            An exception thrown when an unhandled exception is thrown within a task.
            </summary>
        </member>
        <member name="M:ParallelTasks.TaskException.#ctor(System.Exception[])">
            <summary>
            Creates a new instance of the <see cref="T:ParallelTasks.TaskException"/> class.
            </summary>
            <param name="inner">The unhandled exceptions thrown by the task.</param>
        </member>
        <member name="P:ParallelTasks.TaskException.InnerExceptions">
            <summary>
            Gets an array containing any unhandled exceptions that were thrown by the task.
            </summary>
        </member>
        <member name="T:ParallelTasks.Pool`1">
            <summary>
            A thread safe, non-blocking, object pool.
            </summary>
            <typeparam name="T">The type of item to store. Must be a class with a parameterless constructor.</typeparam>
        </member>
        <member name="M:ParallelTasks.Pool`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelTasks.Pool`1"/> class.
            </summary>
        </member>
        <member name="M:ParallelTasks.Pool`1.Get">
            <summary>
            Gets an instance from the pool.
            </summary>
            <returns>An instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:ParallelTasks.Pool`1.Return(`0)">
            <summary>
            Returns an instance to the pool, so it is available for re-use.
            It is advised that the item is reset to a default state before being returned.
            </summary>
            <param name="instance">The instance to return to the pool.</param>
        </member>
        <member name="T:ParallelTasks.Parallel">
            <summary>
            A static class containing factory methods for creating tasks.
            </summary>
        </member>
        <member name="M:ParallelTasks.Parallel.RunCallbacks">
            <summary>
            Executes all task callbacks on a single thread.
            This method is not re-entrant. It is suggested you call it only on the main thread.
            </summary>
        </member>
        <member name="M:ParallelTasks.Parallel.StartBackground(ParallelTasks.IWork)">
            <summary>
            Starts a task in a secondary worker thread. Intended for long running, blocking, work
            such as I/O.
            </summary>
            <param name="work">The work to execute.</param>
            <returns>A task which represents one execution of the work.</returns>
        </member>
        <member name="M:ParallelTasks.Parallel.StartBackground(ParallelTasks.IWork,System.Action)">
            <summary>
            Starts a task in a secondary worker thread. Intended for long running, blocking, work
            such as I/O.
            </summary>
            <param name="work">The work to execute.</param>
            <param name="completionCallback">A method which will be called in Parallel.RunCallbacks() once this task has completed.</param>
            <returns>A task which represents one execution of the work.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="work"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Invalid number of maximum threads set in <see cref="P:ParallelTasks.IWork.Options"/>.
            </exception>
        </member>
        <member name="M:ParallelTasks.Parallel.StartBackground(System.Action)">
            <summary>
            Starts a task in a secondary worker thread. Intended for long running, blocking, work
            such as I/O.
            </summary>
            <param name="action">The work to execute.</param>
            <returns>A task which represents one execution of the action.</returns>
        </member>
        <member name="M:ParallelTasks.Parallel.StartBackground(System.Action,System.Action)">
            <summary>
            Starts a task in a secondary worker thread. Intended for long running, blocking, work
            such as I/O.
            </summary>
            <param name="action">The work to execute.</param>
            <param name="completionCallback">A method which will be called in Parallel.RunCallbacks() once this task has completed.</param>
            <returns>A task which represents one execution of the action.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:ParallelTasks.Parallel.Start(ParallelTasks.IWork)">
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            <param name="work">The work to execute in parallel.</param>
            <returns>A task which represents one execution of the work.</returns>
        </member>
        <member name="M:ParallelTasks.Parallel.Start(ParallelTasks.IWork,System.Action)">
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            <param name="work">The work to execute in parallel.</param>
            <param name="completionCallback">A method which will be called in Parallel.RunCallbacks() once this task has completed.</param>
            <returns>A task which represents one execution of the work.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="work"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Invalid number of maximum threads set in <see cref="P:ParallelTasks.IWork.Options"/>.
            </exception>
        </member>
        <member name="M:ParallelTasks.Parallel.Start(System.Action)">
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            <param name="action">The work to execute in parallel.</param>
            <returns>A task which represents one execution of the work.</returns>
        </member>
        <member name="M:ParallelTasks.Parallel.Start(System.Action,System.Action)">
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            <param name="action">The work to execute in parallel.</param>
            <param name="completionCallback">A method which will be called in Parallel.RunCallbacks() once this task has completed.</param>
            <returns>A task which represents one execution of the work.</returns>
        </member>
        <member name="M:ParallelTasks.Parallel.Start(System.Action,ParallelTasks.WorkOptions)">
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            <param name="action">The work to execute in parallel.</param>
            <param name="options">The work options to use with this action.</param>
            <returns>A task which represents one execution of the work.</returns>
        </member>
        <member name="M:ParallelTasks.Parallel.Start(System.Action,ParallelTasks.WorkOptions,System.Action)">
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            <param name="action">The work to execute in parallel.</param>
            <param name="options">The work options to use with this action.</param>
            <param name="completionCallback">A method which will be called in Parallel.RunCallbacks() once this task has completed.</param>
            <returns>A task which represents one execution of the work.</returns>
        </member>
        <member name="M:ParallelTasks.Parallel.Start``1(System.Func{``0})">
            <summary>
            Creates an starts a task which executes the given function and stores the result for later retrieval.
            </summary>
            <typeparam name="T">The type of result the function returns.</typeparam>
            <param name="function">The function to execute in parallel.</param>
            <returns>A future which represults one execution of the function.</returns>
        </member>
        <member name="M:ParallelTasks.Parallel.Start``1(System.Func{``0},System.Action)">
            <summary>
            Creates an starts a task which executes the given function and stores the result for later retrieval.
            </summary>
            <typeparam name="T">The type of result the function returns.</typeparam>
            <param name="function">The function to execute in parallel.</param>
            <param name="completionCallback">A method which will be called in Parallel.RunCallbacks() once this task has completed.</param>
            <returns>A future which represults one execution of the function.</returns>
        </member>
        <member name="M:ParallelTasks.Parallel.Start``1(System.Func{``0},ParallelTasks.WorkOptions)">
            <summary>
            Creates an starts a task which executes the given function and stores the result for later retrieval.
            </summary>
            <typeparam name="T">The type of result the function returns.</typeparam>
            <param name="function">The function to execute in parallel.</param>
            <param name="options">The work options to use with this action.</param>
            <returns>A future which represents one execution of the function.</returns>
        </member>
        <member name="M:ParallelTasks.Parallel.Start``1(System.Func{``0},ParallelTasks.WorkOptions,System.Action)">
            <summary>
            Creates an starts a task which executes the given function and stores the result for later retrieval.
            </summary>
            <typeparam name="T">The type of result the function returns.</typeparam>
            <param name="function">The function to execute in parallel.</param>
            <param name="options">The work options to use with this action.</param>
            <param name="completionCallback">A method which will be called in Parallel.RunCallbacks() once this task has completed.</param>
            <returns>A future which represents one execution of the function.</returns>
        </member>
        <member name="M:ParallelTasks.Parallel.Do(ParallelTasks.IWork,ParallelTasks.IWork)">
            <summary>
            Executes the given work items potentially in parallel with each other.
            This method will block until all work is completed.
            </summary>
            <param name="a">Work to execute.</param>
            <param name="b">Work to execute.</param>
        </member>
        <member name="M:ParallelTasks.Parallel.Do(ParallelTasks.IWork[])">
            <summary>
            Executes the given work items potentially in parallel with each other.
            This method will block until all work is completed.
            </summary>
            <param name="work">The work to execute.</param>
        </member>
        <member name="M:ParallelTasks.Parallel.Do(System.Action,System.Action)">
            <summary>
            Executes the given work items potentially in parallel with each other.
            This method will block until all work is completed.
            </summary>
            <param name="action1">The work to execute.</param>
            <param name="action2">The work to execute.</param>
        </member>
        <member name="M:ParallelTasks.Parallel.Do(System.Action[])">
            <summary>
            Executes the given work items potentially in parallel with each other.
            This method will block until all work is completed.
            </summary>
            <param name="actions">The work to execute.</param>
        </member>
        <member name="M:ParallelTasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Executes a for loop, where each iteration can potentially occur in parallel with others.
            </summary>
            <param name="startInclusive">The index (inclusive) at which to start iterating.</param>
            <param name="endExclusive">The index (exclusive) at which to end iterating.</param>
            <param name="body">The method to execute at each iteration. The current index is supplied as the parameter.</param>
        </member>
        <member name="M:ParallelTasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32},System.Int32)">
            <summary>
            Executes a for loop, where each iteration can potentially occur in parallel with others.
            </summary>
            <param name="startInclusive">The index (inclusive) at which to start iterating.</param>
            <param name="endExclusive">The index (exclusive) at which to end iterating.</param>
            <param name="body">The method to execute at each iteration. The current index is supplied as the parameter.</param>
            <param name="stride">The number of iterations that each processor takes at a time.</param>
        </member>
        <member name="M:ParallelTasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes a foreach loop, where each iteration can potentially occur in parallel with others.
            </summary>
            <typeparam name="T">The type of item to iterate over.</typeparam>
            <param name="collection">The enumerable data source.</param>
            <param name="action">The method to execute at each iteration. The item to process is supplied as the parameter.</param>
        </member>
        <member name="P:ParallelTasks.Parallel.ProcessorAffinity">
            <summary>
            Gets or sets the processor affinity of the worker threads.
            </summary>
            <value>
            The processor affinity of the worker threads. The default value is <c>{ 3, 4, 5, 1 }</c>.
            </value>
            <remarks>
            <para>
            In the .NET Compact Framework for Xbox 360 the processor affinity determines the processors 
            on which a thread runs. 
            </para>
            <para>
            <strong>Note:</strong> The processor affinity is only relevant in the .NET Compact Framework 
            for Xbox 360. Setting the processor affinity has no effect in Windows!
            </para>
            <para>
            <strong>Important:</strong> The processor affinity needs to be set before any parallel tasks
            are created. Changing the processor affinity afterwards has no effect.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified array is empty or contains invalid values.
            </exception>
        </member>
        <member name="P:ParallelTasks.Parallel.Scheduler">
            <summary>
            Gets or sets the work scheduler.
            This defaults to a <see cref="T:ParallelTasks.SimpleScheduler"/> instance.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
    </members>
</doc>
